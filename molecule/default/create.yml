# Standards: 1.2
---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: False
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_user: ubuntu
    ssh_port: 22

    security_group_name: molecule
    security_group_description: "Molecule security group"
    security_group_rules:
      - proto: tcp
        port: "{{ ssh_port }}"
        cidr: '0.0.0.0/0'
      - proto: icmp
        port: -1
        cidr: '0.0.0.0/0'
      - ethertype: IPv4
        group: "{{ openstack_security_group.id }}"
      - ethertype: IPv6
        group: "{{ openstack_security_group.id }}"

    neutron_network_name: internet-nix

    keypair_name: "molecule-{{ molecule_yml['name'] }}"
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"

  tasks:
    - name: Create security group
      register: openstack_security_group
      openstack.cloud.security_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_description }}"

    - name: Create security rules
      loop: "{{ security_group_rules }}"
      openstack.cloud.security_group_rule:
        security_group: "{{ security_group_name }}"
        protocol: "{{ item.proto | default(omit) }}"
        port_range_min: "{{ item.port | default(omit) }}"
        port_range_max: "{{ item.port | default(omit) }}"
        remote_ip_prefix: "{{ item.cidr | default(omit) }}"
        remote_group: "{{ item.group | default(omit) }}"
        ethertype: "{{ item.ethertype | default(omit) }}"

    - name: Stat local keypair
      register: openstack_keypair_local
      stat:
        path: "{{ keypair_path }}"

    - name: Delete remote keypair
      when: not openstack_keypair_local.stat.exists
      openstack.cloud.keypair:
        name: "{{ keypair_name }}"
        state: absent

    - name: Create remote keypair
      register: openstack_keypair_remote
      openstack.cloud.keypair:
        name: "{{ keypair_name }}"

    - name: Persist keypair locally
      when: openstack_keypair_remote.changed
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ openstack_keypair_remote.key.private_key }}"
        mode: 0600

    - name: Create molecule instances
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      register: openstack_server
      async: 7200
      poll: 0
      openstack.cloud.server:
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        flavor: "{{ item.flavor }}"
        security_groups: "{{ security_group_name }}"
        key_name: "{{ keypair_name }}"
        nics:
          - net-name: "{{ neutron_network_name }}"

    - name: Wait for creation
      loop: "{{ openstack_server.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: openstack_jobs
      until: openstack_jobs.finished
      retries: 300
      async_status:
        jid: "{{ item.ansible_job_id }}"

    - name: Populate instance config
      loop: "{{ openstack_jobs.results }}"
      loop_control:
        label: "{{ item.server.name }}"
      register: openstack_instance_config
      when: openstack_server.changed | bool
      set_fact:
        openstack_instance_conf_dict: {
          'instance': "{{ item.openstack.name }}",
          'address': "{{ item.openstack.accessIPv4 }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}",
        }

    - name: Convert instance config
      when: openstack_server.changed | bool
      set_fact:
        openstack_instance_conf_parsed: "{{ openstack_instance_config.results | map(attribute='ansible_facts.openstack_instance_conf_dict') | list }}"

    - name: Dump instance config
      when: openstack_server.changed | bool
      copy:
        content: "{{ openstack_instance_conf_parsed | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"

    - name: Wait for SSH
      loop: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
      loop_control:
        label: "{{ item.instance }}"
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10

...
